1. Что такое качество?
Качество (Quality)
   - степень, в которой ПО обладает требуемой комбинацией свойств
   - совокупность характеристик ПО, относящихся к его способности удовлетворять установленные и предполагаемые потребности
 ISTQB глоссарий
   - степень, с которой рабочий продукт удовлетворяет заявленным и подразумеваемым потребностям заинтересованных сторон.

2. Что такое тестирование?
   – проверка соответствия между реальным и ожидаемым поведением программы

3. Характеристики качества и виды тестирования
   - Функциональная пригодность (Функциональное тестирование)
   - Производительность (Тестирование производительности)
   - Сопровождаемость
   - Удобство пользователя (Юзабилити тестирование)
   - Совместимость (Тестирование локализации и интернационализации)
   - Надежность
   - Защищенность 
   - Переносимость 

4. Цели тестирования?
   Найти дефекты и убедиться,что продукт отвечает требованиям.

5. Как расшифровывается QA инженер (по русски и по английски)?
   Quality Assurance (QA) – Обеспечение качества – Это активности, направленные на обеспечение уверенности в том, 
   что требования к качеству будут выполнены

6. Что делает QA инженер?
   Работает над качеством продукта на всех этапах его разработки – от планирования до выхода на рынок и встречи с пользователем. 
   QA отвечает за все, что может повлиять на качество продукта: обучение персонала, аудит процессов, риск-менеджмент. 
   QA могут вносить предложения по улучшению программного обеспечения, ведь в процессе тестирования всегда возникает много идей, 
   как можно усовершенствовать продукт.

7. Как расшифровывается QС инженер (по русски и по английски)?
   Quality Assurance (QA) – Обеспечение качества – Это активности, направленные на обеспечение уверенности в том, 
   что требования к качеству будут выполнены

8. Что делает QС инженер?
   QC подключаются к проекту только на завершающей стадии разработки. 
   Основные задачи: проверить соответствие продукта техзаданию, найти и исправить ошибки, проверить производительность, 
   протестировать пользовательский интерфейс, провести тестирование безопасности. 
   После проверки QC программное обеспечение должно быть полностью готово к сдаче заказчику и выходу на широкий рынок.

9. Чем отличаются тестировщик, QA и QC?
   Тестировщик изучает продукт, проводит исследования, отрабатывает возможные сценарии и ловит баги. Он предоставляет команде общую картину о продукте. 
   QC не повышает качество, а даёт представление о том, что происходит в разработке. 
   QA же помогает команде наладить процессы, связанные с качеством.

10.Что такое верификация и валидация? Отличие
   Верификация - это когда вы делаете тесты, сверяясь с какими-то требованиями, опираясь на документацию.
   Валидация – это когда вы оцениваете качество продукта исходя из того, будет доволен заказчик или нет.
   Верификация проверяет, что продукт соответствует требованиям и спецификациям, в то время как валидация проверяет, 
    что продукт соответствует ожиданиям и потребностям пользователей

-------------------------------
1. Как расшифровывается SDLC?
   SDLC – Software Development Life Cycle – Жизненный цикл разработки ПО

2. Перечислите по порядку фазы жизненного цикла ПО (на русском и на английском)
   1) Requirements - Требования
   2) Design - Проектирование
   3) Development – Разработка ПО
   4) Testing – Тестирование
   5) Deployment – Внедрение в эксплуатацию 
   6) Maintenance – Техническая Поддержка 

3. Перечислите по порядку этапы формирования продукта
   1) PoC – Proof Of Concept – Доказательство правильности концепции
   2) Prototype – Прототип. Черновик
   3) MVP – Minimum Viable Product – Минимально Жизнеспособный Продукт
   4) Production – Эксплуатация

4. Как расшифровывается PoC. Поясните что это
   PoC – Proof Of Concept – Доказательство правильности концепции
   Позволяетй на начальном этапе просчитать, чем для вашего бизнеса может обернуться любое новшество, будь то внедрение новой технологии
   на производстве или создание нового ПО.

5. Как расшифровывается Prototype. Поясните что это.
   Prototype – Прототип. Черновик
   «скелет» будущего продукта, интерактивная модель проекта, с помощью которой прорабатывается положение и поведение всех его элементов.

6. Как расшифровывается MVP. Поясните что это.
   MVP – Minimum Viable Product – Минимально Жизнеспособный Продукт
   Такой продукт обладает ограниченным функционалом, но его достаточно, чтобы потребители начали им пользоваться. 

7. Как расшифровывается Production. Поясните что это.
   Production – Эксплуатация
   рабочая версия продукта, которую видят пользователи. Результат разработки.

8. Что такое аутсорс?
   outsourcing — Заказчик передает создание или ведение своего проекта в руки другой компании

9. Что такое аутстафф?
   outstaffing — это аренда специалиста, работающего в компании-подрядчике, для работы на проекте в компании-заказчике

10.Для чего нужна jira?
   инструмент управления проектами

11.Для чего нужен github?
   github - облачное хранилище
   веб-сервис, который позволяет разработчикам хранить свой код, а также делиться этим кодом с коллегами и заниматься его совместной разработкой 
   в open source
-------------------------------------

1. Что такое статическое тестирование?
   тестирование, где не требуется запуск приложения

2. Что такое динамическое тестирование?
   тестирование, где требуется запуск приложения

3. Что такое сценарное тестирование?
   тестирование по заранее написанному плану (сценарию)

4. Что такое исследовательское тестирование?
    тестирования заключается в исследовании программы, то есть в изучении ее поведения

5. Какой артефакт тестирования вы знаете?
     Отчет о проведенном тестировании

6. Что может в себя включать отчет о тестировании?
   - Перечень тестов и дефектов
   - Что, кто, когда и как тестировал
   - Инструкции для техподдержки

7. Что такое баг?
   Ошибка в программе или в системе, которая выдает неожиданный или неправильный результат
   Отклонение фактического результата от ожидаемого результата
-------------------------------------------------------------
1. Модель Waterfall
  Модель со строго последовательными этапами разработки
    1) Выработка системных требований
    2) Выработка требований к ПО
    3) Анализ
    4) Проектирование
    5) Кодирование
    6) Тестирование
    7) Эксплуатация
2. V-модель
   модель тестирования, в которой фаза тестирования происходит параллельно с соответствующей фазой написания кода. 
   V-модель является расширением waterfall-модели, в которой тестирование происходит после разработки. 
   Известна под названием модель верификации или модель валидации.
  
  V-образная модель является расширением традиционной водопадной модели. Основное отличие заключается в том, что этапы тестирования систематически связаны 
    с соответствующими этапами разработки. Это означает, что для каждого этапа разработки (например, требований, дизайна, реализации) существует прямо связанный этап тестирования.
  Этапы V-Model:
    Определение требований: Установление требований к продукту.
    Системное проектирование: Разработка архитектуры системы.
    Архитектурное проектирование: Разработка архитектуры компонентов.
    Модульное проектирование: Детализация проектирования компонентов.
    Кодирование: Реализация проекта в коде.
    Модульное тестирование: Тестирование отдельных компонентов.
    Интеграционное тестирование: Тестирование взаимодействия компонентов.
    Системное тестирование: Тестирование системы в целом.
    Тестирование приемки: Проверка соответствия требованиям заказчика.

3. Итерационная и инкрементальная модель
   Итерационная модель разработки программного обеспечения (Iterative model) — это модель разработки ПО, в которой процесс разработки разбивается на несколько итераций,
   каждая из которых проходит через все фазы разработки (анализ, проектирование, кодирование, тестирование и документирование). 
   В конце каждой итерации выполняется анализ результатов и проводится корректировка плана следующей итерации. 
   Таким образом, разработчики могут уточнить требования и функциональные возможности продукта на основе опыта предыдущих итераций, что повышает качество итогового продукта.

   Инкрементная модель разработки программного обеспечения (Incremental model) — это модель разработки ПО, в которой функциональность продукта разбивается на наборы (инкременты), 
   каждый из которых представляет собой полноценную версию продукта, содержащую новые функции и возможности. Каждый инкремент разрабатывается и тестируется 
   независимо от других инкрементов, и в конце каждой итерации производится интеграция новых функций в общую систему. Таким образом, разработка продукта происходит постепенно, 
   шаг за шагом, позволяя быстро получать обратную связь и быстро реагировать на изменения требований клиента. 

   Обе модели имеют свои преимущества и недостатки и выбор модели зависит от конкретных условий проекта. 
    Если у клиента есть четкие требования к продукту, лучше использовать итерационную модель, которая позволяет уточнить требования и улучшить качество продукта. 
    Если же требования к продукту меняются динамично, то инкрементная модель может быть более эффективной, так как она позволяет быстро внедрять изменения и получать 
    обратную связь от клиента.

  Инкрементальная модель разработки программного обеспечения представляет собой подход, при котором продукт разрабатывается и выпускается поэтапно, 
    в виде последовательности отдельных, функциональных частей, или "инкрементов".  
   Ключевые аспекты этой модели:
    Постепенное добавление функций: Каждый инкремент вносит некоторое количество функций или улучшений в продукт.
    Планирование и разработка: На каждом этапе разработки планируется набор функций для следующего инкремента.
    Фокус на текущую итерацию: Работа ведется над одним инкрементом за раз, что упрощает управление проектом.
    Тестирование и обратная связь: После каждого инкремента продукт тестируется, и на основе обратной связи вносятся изменения в следующий инкремент.
 
  Итеративная модель разработки программного обеспечения - это подход, при котором проект развивается через повторяющиеся циклы (итерации). 
    Каждая итерация представляет собой мини-проект, включающий этапы планирования, анализа требований, дизайна, реализации и тестирования. 
    Этот подход позволяет команде постоянно улучшать и дорабатывать продукт, а также адаптироваться к изменяющимся требованиям клиента или рынка.

4. Спиральная модель
  Модель Spiral (спиральная модель) — это гибкая методология разработки программного обеспечения, которая сочетает в себе итеративный подход с последовательностью шагов, 
  основанных на рисках.

  Основная идея спиральной модели заключается в том, чтобы разбить проект на более мелкие итерации, каждая из которых содержит этапы планирования, анализа рисков, 
   проектирования, реализации, тестирования и оценки. Каждая итерация зависит от предыдущей и планируется на основе ее результатов.

  Спиральная модель включает в себя оценку рисков на каждой стадии проекта, а также их управление. Это помогает снизить риски и улучшить качество продукта, 
   который создается в процессе разработки.

  Спиральная модель, представляет собой гибкую и итеративную методологию разработки программного обеспечения. Она сочетает в себе элементы как итеративной, 
   так и водопадной модели с сильным акцентом на анализ и управление рисками. Спиральная модель особенно подходит для крупных, сложных и высокорискованных проектов.
   Основные этапы спиральной модели:
    Планирование: Определение целей, альтернатив и ограничений проекта.
    Анализ рисков: Выявление, оценка и снижение рисков, связанных с проектом.
    Инженерная разработка и тестирование: Разработка и проверка продукта на этом этапе.
    Оценка и планирование: Анализ результатов текущего цикла и планирование следующего.

5. Agile-манифест
 Agile – это философия разработки программного обеспечения, которая призывает к гибкости и адаптивности в процессе разработки продукта. 
  Она акцентирует внимание на быстрой итеративной разработке продукта с частыми поставками рабочего программного кода, которые постоянно улучшаются на основе 
  обратной связи от пользователей и заказчиков.

 Цель:
 - Объединить уже существующие на тот момент гибкие методологии
 - Создать концепцию, которая будет противопоставлена жестким методологиям
 4 ценности
  Люди и взаимодействие важнее процессов и инструментов
  Работающий продукт важнее исчерпывающей документации
  Сотрудничество с заказчиком важнее согласования условий контракта
  Готовность к изменениям важнее следования первоначальному плану
 12 принципов
  Главное - хороший продукт и довольный заказчик
  Готовность к изменениям в любой момент
  Показывать полностью рабочую часть продукта как можно чаще
  Постоянные встречи команды и заказчика для обмена информацией
  Заказчик и разработчики должны работать вместе как одна команда
  Важно доверять людям в том, что они делают
  Есть рабочий продукт - есть прогресс
  Гибгие процессы - это непрерывное развитие
  Внимание к качеству способствует гибкости
  Простота процесса разработки избавляет от лишней работы
  Самоорганизующаяся команад работает лучше
  Постоянное стремление к большей эффективности

6. Гибкие методологии
   Методологии Agile, такие как Scrum, Kanban, Extreme Programming (XP), Feature Driven Development (FDD) и другие, позволяют командам быстро реагировать 
   на изменения требований и перестраивать свой подход к разработке, чтобы достичь лучших результатов. 
   В центре философии Agile лежит идея о том, что процесс разработки должен быть гибким и адаптивным, что позволяет командам быстро реагировать на изменения
     и принимать важные решения на основе обратной связи от пользователей и заказчиков.
  Agile — это подход к разработке программного обеспечения, который акцентирует гибкость, постоянное улучшение продукта и адаптацию к изменяющимся требованиям. 
   Он включает в себя ряд методологий и практиик, таких как Scrum, Kanban и Extreme Programming (XP). 
   Ключевые принципы Agile заключаются в итеративном развитии, тесном сотрудничестве с клиентами, приеме изменений и высокой адаптивности.

7. Scrum
  Scrum — это фреймворк гибкой разработки ПО, который считается методологией «по умолчанию». Для многих является синонимом Agile.
   Используя методологию Scrum, представитель заказчика плотно работает с командой разработки, расставляя приоритеты в списке требований к продукту (Product Backlog). 
   Этот список состоит из баг-фиксов, функциональных и нефункциональных требований — из всего, что нужно сделать для реализации рабочего приложения.

  Функциональные элементы, добавляемые в бэклог, называют историями. Каждая задача оценивается в определенное количество очков. Очки являются абстрактной метрикой 
  и для её оценки могут использоваться самые разные шкалы (например, ряд Фибоначчи или степени двойки).

  На основании списка требований заказчика команда определяет функции, которые хочет реализовать, и начинает свой спринт. Обычно он длится 30 дней. 
     В конце подсчитывается общее количество очков, набранных командой за спринт (скорость). Это позволяет более четко планировать следующие спринты.

  Scrum — это гибкая методология управления проектами, чаще всего используемая для разработки программного обеспечения, хотя её принципы и практики применимы в любой области. 
   Основная идея Scrum заключается в создании функциональных продуктов в коротких временных рамках, называемых спринтами.
   Ключевые элементы Scrum:
    Спринты: Итерации, обычно длящиеся от одной до четырех недель, в течение которых команда работает над определенным объемом работы.
    Скрам-мастер: Человек, отвечающий за соблюдение принципов Scrum и устранение препятствий, с которыми сталкивается команда.
    Product Owner (Владелец продукта): Отвечает за определение функциональности продукта и приоритетов работы команды.
    Ежедневные стендапы (Daily Stand-Ups): Краткие ежедневные встречи, на которых команда обсуждает текущие задачи и проблемы.
    Бэклог продукта: Список всех требуемых функций, изменений и улучшений для продукта.
    Обзор спринта: Встреча в конце спринта для демонстрации проделанной работы и получения обратной связи от заинтересованных сторон.


8. Kanban
  Канбан — это техника для управления разработкой, где процесс разработки рассматривается как конвейер с запросами на реализацию функций, с которого сходит 
   улучшенное программное обеспечение.
  методология исключает излишнее накопление задач. Например, если тестировщики проверяют пять функций за неделю, а разработчики и аналитики реализуют десять, 
   то «общая пропускная способность конвейера» ограничивается до пяти функций. 

  Kanban - это методика управления рабочим процессом, которая помогает организациям улучшить свои системы доставки продуктов или услуг. 
    Основная идея Kanban состоит в том, чтобы визуализировать рабочий процесс, обеспечить непрерывный поток работы и управлять загрузкой команды.
  Ключевые элементы модели Kanban:
    Визуализация Рабочего Процесса: Работа представлена на доске Kanban (физической или цифровой), которая разделена на столбцы, представляющие различные этапы процесса (например, "К выполнению", "В работе", "Выполнено").
    Ограничение Незавершенной Работы (WIP): Каждый столбец имеет ограничение на количество задач, которые могут находиться в нем одновременно. Это помогает предотвратить перегрузку команды и подчеркивает необходимость завершения текущих задач перед началом новых.
    Управление Потоком: Kanban фокусируется на сглаживании потока работы, минимизации времени выполнения задач и оптимизации процесса доставки.
    Непрерывное Улучшение: Команды регулярно анализируют свои рабочие процессы и ищут способы их улучшения.

9. RUP и MSF
  Rational Unified Process (RAP) - 
  процесс разработки программного обеспечения, созданный компанией Rational Software, который сосредотачивается на итерационной разработке и объекто-ориентированном 
   анализе и проектировании.
  RUP  включает в себя ряд ролей, артефактов и деятельностей, позволяющих командам ориентироваться на лучшие практики при выполнении проектов
   Основной концепцией RUP является итеративная разработка. В отличие от "водопадных" моделей, где каждый этап (анализ, проектирование, реализация и тестирование) 
  следует друг за другом, RUP делит разработку на множество итераций. Каждая итерация представляет собой мини-цикл разработки, включающий все ключевые этапы, 
   что позволяет команде быстро адаптироваться к изменяющимся требованиям и обстоятельствам.
  Еще одной ключевой чертой RUP является визуализация и моделирование. Используя UML (Unified Modeling Language) в качестве основного языка моделирования, 
  RUP подчеркивает важность визуального представления системы на всех этапах разработки. Это помогает командам лучше понимать сложные системы и упрощает коммуникацию между
  стейкхолдерами.
   Вместо того чтобы фокусироваться исключительно на фазах или этапах, RUP определяет конкретные роли (например, архитектор, аналитик, разработчик), 
    артефакты (документы, модели, код) и деятельности (задачи, которые нужно выполнить), что создает четкую карту работы для команды.
  
  Основная концепция RUP заключается в сочетании структурированного подхода с гибкостью итеративной разработки, делая акцент на моделировании, ролях и адаптивности. 
   Этот подход помогает организациям управлять сложностью, рисками и изменениями, обеспечивая высокое качество результатов.

RUP делит проект на четыре основные фазы, каждая из которых имеет свои цели и результаты:

    Начальная фаза (Inception). Цель этой фазы заключается в определении общей концепции проекта, анализе основных рисков, а также в создании бизнес-кейса.
     В результате этой фазы команда должна иметь четкое понимание основных требований и рамок проекта.
    Уточняющая фаза (Elaboration). В этой фазе команда уточняет требования, разрабатывает основную архитектуру системы и разрабатывает план выпуска продукта. 
     Здесь основное внимание уделяется анализу рисков и проработке ключевых аспектов системы.
    Фаза разработки (Construction). Здесь основное внимание уделяется разработке, кодированию и тестированию. 
     К концу этой фазы команда должна иметь рабочую версию продукта, готовую к выпуску.
    Переходная фаза (Transition). В этой фазе происходит переход продукта к пользователю. 
      Это включает в себя устранение ошибок, тренировку пользователей и развертывание системы в продуктивной среде.

https://dzen.ru/a/ZSVhK45knlT1H_Mc

  Microsoft Solution Framework (MSF) - 
       это набор принципов, моделей и рекомендаций, разработанный Microsoft для эффективного управления и реализации IT-проектов. 
           MSF не является строгой методологией, а скорее представляет собой гибкий фреймворк, который можно адаптировать к различным видам проектов. 
           Он включает в себя как технические аспекты разработки, так и управленческие аспекты проекта.
  Основные компоненты MSF:
    Модель команды: Определяет роли в проектной команде, такие как Product Manager, Program Manager, Development Lead, Test Lead и другие.
    Модель процесса: Предлагает фазы проекта, включая Планирование, Разработку, Стабилизацию и Внедрение.
    Принципы: Например, управление рисками, удовлетворение потребностей клиента, построение качества продукта.
    Модель рисков: Сосредоточена на идентификации, оценке и управлении рисками проекта.

кратко обо всех моделях (https://dzen.ru/a/ZawGm11Dd3_8rUTj?sid=201062655914428432):
Waterfall (Водопад): Это последовательная (нелинейная) модель, в которой разработка течет вниз через стадии: Требования -> Дизайн -> Реализация -> Верификация -> Поддержка. Каждый этап начинается только после завершения предыдущего.
V-model (V-образная модель): Расширение водопадной модели, где каждому этапу разработки соответствует этап тестирования. Она подчеркивает важность тестирования на каждом этапе разработки.
Incremental model (Инкрементальная модель): Разработка разбита на инкременты (небольшие части), каждый из которых проходит через цикл водопадной модели и добавляет функциональность к продукту.
Iterative model (Итеративная модель): Подход, при котором проект развивается через повторяющиеся циклы (итерации), позволяя улучшать и дорабатывать продукт с каждой итерацией.
Spiral model (Спиральная модель): Комбинирует итеративный подход с элементами управления рисками. Разработка проходит через серию итераций, на каждой из которых уделяется внимание анализу рисков.
Chaos model (Модель хаоса): Эта модель признает, что проекты часто бывают хаотичными и предлагает минимум структуры, при этом подчеркивая важность спонтанности и гибкости.
Prototype model (Модель прототипирования): Предполагает создание рабочих прототипов на ранних этапах разработки для лучшего понимания требований и возможностей продукта.
Agile (Гибкая разработка): Подход, ориентированный на быструю и гибкую разработку, частые обновления и тесное взаимодействие с заказчиком.
Scrum: Методология для управления проектами, которая поддерживает гибкую разработку, делая акцент на ролях, событиях и артефактах.
Kanban: Методика, которая управляет рабочим процессом, минимизируя количество незавершенной работы и улучшая поток.
Lean (Бережливая разработка): Подход, сосредоточенный на устранении потерь, повышении эффективности и оптимизации производственных процессов.
MSF (Microsoft Solutions Framework): Набор принципов, моделей и рекомендаций для достижения успеха в разработке, развертывании и управлении IT-проектами, разработанный Microsoft.

10. Обязанности QA зависят от того, как устроены процессы в команде
11. 7 принципов тестирования
 1) Тестирование демонстрирует наличие дефектов, а не отсутствие их
 2) Исчерпывающее тестирование невозможно
 3) Раннее тестирование экономит время и деньги
 4) Кластеризация дефектов
 5) Парадокс пестицида
 6) Тестирование зависит от контекста
 7) Заблуждение об отсутствии ошибок
------------------------------------------------
1. Виды, уровни и методы тестирования
  Виды тестирования удобно делить на две группы: функциональное и нефункциональное.
  В некоторых справочниках встречается еще третий тип — эксплуатационное тестирование (maintenance testing), выполняемое при сопровождении уже работающего продукта

  Существует 4 уровня тестирования. Они составляют тестовую пирамиду. Это, снизу вверх:
   1) Юнит-тестирование (поиск ошибок в отдельных (изолированных) юнитах-компонентах)
         Юнит — это самая маленькая часть продукта, которая может тестироваться. Название юнит равнозначно названию модуль, 
         следовательно юнит-тестирование равнозначно модульному тестированию (также иногда называют блочным тестированием). Юнит-тестирование — это 
   2) Интеграционное тестирование (два или более программных компонента проверяются на качество интеграции между собой: взаимодействуют ли они между собой 
          как ожидалось, или есть ошибки в интерфейсе между ними?)
   3) Системное тестирование  (проверка всех элементов, составляющих программную систему, на соответствие требованиям)
   4) Приемочное тестирование (проверка, выполнены ли требования конечных пользователей)
      Если приемочное тестирование успешно завершено, продукт идет на доставку (delivery), и считается, что продукт будет нормально работать в пользовательском окружении. 
  Методы тестирования:
    Чёрный ящик (Black-box testing)
    Белый ящик (White-box testing)
    Серый ящик (Gray-box testing)

2. Функциональное и нефункциональное тестирование
  Функциональное тестирование - 
   тестирование основных, «рабочих» функций приложения/сайта; ради этих функций приложение, собственно, создавалось.
    Более общее определение, с точки зрения QA: проверка выполнения функциональных требований к приложению, зафиксированных ранее. 
    Тестируется работоспособность в целом и каждая функция отдельно: выполнены ли требования, достигнут ли целевой результат?
  Нефункциональное тестирование - 
    тестирование, проверяющее нефункциональные аспекты приложения, а именно производителность, надежность, безопасность, юзабельность (то есть удобство пользования). 
3. Тестирование производительности
  Оценка общей производительности (продуктивности) приложения, выполняемая как правило при помощи специализированных инструментов, выявляющих проблемы в этой сфере:
4. Юзабилити тестирование
   Оценка (и последующая коррекция) общего удобства пользования приложением/сайтом. Насколько приложение юзабельно, то есть «дружественно к пользователю»? 

5. Позитивное-негативное тестирование
Позитивное тестирование (Positive Testing) – это вид тестирования, при котором проверяются тестовые сценарии, соответствующие действиям, которые выполнял бы конечный пользователь 
при взаимодействии с продуктом. Позитивное тестирование подразумевает выполнение тестового сценария только с правильными и достоверными данными.
Негативное тестирование (Negative Testing), также называемое “Error path testing”, “Failure testing”, обычно проводится для обеспечения стабильности приложения.

Негативное тестирование – это процесс применения как можно более творческого подхода для проверки работы приложения в случае получения недостоверных данных. 
Его цель – проверить, отображаются ли ошибки пользователю там, где они должны отображаться, и корректно ли обрабатываются недопустимые значения.

6. WhiteBox-BlackBox тестирование

Тестирование белого ящика базируется на знаниях об устройстве системы. Тестирование черного ящика базируется на знаниях требований к системе.

Что такое тестирование черного ящика?
Это подход, когда QA тестируют приложение, не зная, как оно устроено внутри, но с очень хорошим пониманием спецификации и требований. 
Тестирование черного ящика — это, в первую очередь, проверка того, что продукт соответствует функциональным требованиям. Такое тестирование проводится на основе документации.
Тестирование черного ящика делится на:
    Функциональное тестирование — проверка функциональности приложения (“Что приложение делает?”)
    Нефункциональное тестирование — проверка производительности, безопасности, usability (“Как приложение работает?”)
В тестирование черного ящика также входит и так называемое тестирование на основе опыта (Experience-based testing). 
QA проверяет приложение, основываясь на интуиции и опыте тестирования других похожих проектов.

Что такое тестирование белого ящика?
Тестирование белого ящика (стеклянного ящика) проверяет исходный код и ставит целью убедиться, что он работает правильно. Инженер, занимающийся тестированием должен знать программирование на достаточном уровне. Часто такое тестирование проводят сами разработчики.
Два основных метода проведения тестирования белого ящика:
    Statement coverage testing — покрытие операторов. Во время тестирования покрывают код так, чтобы во время тестирования каждый оператор выполнился хотя бы один раз.
    Decision/Branch coverage testing — покрытие решений. Код покрывается тестами так, чтобы во время тестирования выполнились все ветки всех условных операторов.

